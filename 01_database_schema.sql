create table DEPARTMENTS(
    DEPARTMENT_ID NUMBER generated always as identity,
    NAME VARCHAR2(100) NOT NULL,
    primary key(DEPARTMENT_ID)
);

create table EMPLOYEES(
    EMPLOYEE_ID NUMBER generated always as identity,
    FIRST_NAME varchar2(100) not null,
    MIDDLE_NAME varchar2(100),
    LAST_NAME varchar2(100) not null,
    ADDRESS varchar2(1000),
    PHONE varchar2(20),
    EMAIL varchar(100) unique,
    POSITION varchar2(100),
    DEPARTMENT_ID number,
    MANAGER_ID number,
    primary key(EMPLOYEE_ID),
    constraint FK_EMPLOYEES_DEPARTMENT foreign key (DEPARTMENT_ID)
    references DEPARTMENTS(DEPARTMENT_ID) on delete set null,
    constraint FK_EMPLOYEES_EMPLOYEES foreign key (MANAGER_ID)
    references EMPLOYEES(EMPLOYEE_ID) on delete set null
);

create table CLIENTS(
    CLIENT_ID number generated always as identity,
    FIRST_NAME varchar2(100) not null,
    MIDDLE_NAME varchar2(100),
    LAST_NAME varchar2(100) not null,
    ADDRESS varchar2(1000),
    PHONE varchar2(20),
    EMAIL varchar(100) unique,
    primary key(CLIENT_ID)
);

create table ACCOUNTS(
    ACCOUNT_ID number generated always as identity,
    CLIENT_ID number not null,
    ACCOUNT_NUMBER varchar2(20) unique not null,
    BALANCE number(15,2) default 0 not null,
    CURRENCY varchar2(3) default 'BGN' not null,
    primary key (ACCOUNT_ID),
    constraint FK_ACCOUNTS_CLIENT foreign key (CLIENT_ID)
    references CLIENTS(CLIENT_ID) on delete cascade
);

--generated by chatgpt because i'm a little lazy :)
INSERT INTO DEPARTMENTS (NAME) VALUES ('Операции');
INSERT INTO DEPARTMENTS (NAME) VALUES ('Кредитен анализ');
INSERT INTO DEPARTMENTS (NAME) VALUES ('Risk Management');
INSERT INTO DEPARTMENTS (NAME) VALUES ('Customer Service');
INSERT INTO DEPARTMENTS (NAME) VALUES ('IT and Security');
INSERT INTO DEPARTMENTS (NAME) VALUES ('Investment Banking');

INSERT INTO EMPLOYEES (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, POSITION, DEPARTMENT_ID, MANAGER_ID) 
VALUES ('Иван', 'Георгиев', 'Петров', 'ул. Витоша 12, София', '0888123456', 'ivan.petrov@bank.bg', 'Мениджър', 1, NULL);

INSERT INTO EMPLOYEES (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, POSITION, DEPARTMENT_ID, MANAGER_ID) 
VALUES ('Мария', 'Иванова', 'Димитрова', 'ул. Плиска 5, Варна', '0888765432', 'maria.dimitrova@bank.bg', 'Анализатор', 2, 1);

INSERT INTO CLIENTS (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL) 
VALUES ('Александър', 'Петров', 'Иванов', 'бул. България 20, София', '0899112233', 'alex.ivanov@client.bg');

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (1, 'BG1234567890', 5000.00, 'BGN');
--end of chatgpt generation!!!!!!!!

--biznes zayavka 1
--1
select NAME 
from DEPARTMENTS;

--2
select * 
from employees;
delete from employees;
alter table EMPLOYEES add SALARY NUMBER(10,2) NOT NULL;


INSERT INTO EMPLOYEES (FIRST_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, POSITION, DEPARTMENT_ID, MANAGER_ID, SALARY) 
VALUES ('Ivan', 'Petrov', 'bul. Vitosha 12, Sofia', '0888123456', 'ivan.petrov@bankoftomarow.bg', 'Manager', 1, NULL, 5500);

INSERT INTO EMPLOYEES (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, POSITION, DEPARTMENT_ID, MANAGER_ID, SALARY) 
VALUES ('Maria', 'Ivanova', 'Dimitrova', 'bul. Pliska 5, Varna', '0888765432', 'maria.dimitrova@bankoftomarow.bg', 'Analyzator', 2, 9, 3000);


select FIRST_NAME || ' ' || MIDDLE_NAME ||' '|| LAST_NAME as FULL_NAME, SALARY 
from EMPLOYEES;

--3
select 
    FIRST_NAME || ' ' || MIDDLE_NAME ||' '|| LAST_NAME as FULL_NAME,
    lower(FIRST_NAME || '.' || LAST_NAME || '@bankoftomarow.bg') as EMAIL
from EMPLOYEES;

--4
alter table EMPLOYEES
add HIRE_DATE date;

update EMPLOYEES
set HIRE_DATE = TO_DATE('2015-09-29','YYYY-MM-DD')
where FIRST_NAME = 'Ivan' and LAST_NAME = 'Petrov';

update EMPLOYEES
set HIRE_DATE = TO_DATE('2022-03-08','YYYY-MM-DD')
where FIRST_NAME = 'Maria' and LAST_NAME = 'Dimitrova';

select FIRST_NAME || ' ' || MIDDLE_NAME ||' '|| LAST_NAME as FULL_NAME, HIRE_DATE
from EMPLOYEES
where HIRE_DATE <= ADD_MONTHS(SYSDATE, -60);

--5
update EMPLOYEES
set POSITION = 'Analyst'
where POSITION = 'Analyzator';

INSERT INTO EMPLOYEES (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, POSITION, DEPARTMENT_ID, MANAGER_ID, SALARY)
VALUES ('Elena', 'Maria', 'Ivanova', 'ul. 12, Sofia', '0899123456', 'elena.maria@bankoftomarow.bg', 'Analyst', 2, 9, 3200);
update EMPLOYEES
set HIRE_DATE = TO_DATE('2023-04-20','YYYY-MM-DD')
where FIRST_NAME = 'Elena' and LAST_NAME = 'Ivanova';


select FIRST_NAME || ' ' || MIDDLE_NAME ||' '|| LAST_NAME as FULL_NAME, HIRE_DATE
from EMPLOYEES
where lower(FIRST_NAME) like '%l%'
or lower(MIDDLE_NAME) like '%l%'
or lower(LAST_NAME) like '%l%';

--biznes zayavka 2
--1
create table EMPLOYEE_MOVES
(
    MOVE_ID number generated always as identity,
    EMPLOYEE_ID number not null,
    OLD_DEPARTMENT_ID number,
    NEW_DEPARTMENT_ID number not null,
    MOVE_DATE date default sysdate not null,
    primary key (MOVE_ID),
    constraint FK_MOVEMENT_EMPLOYEE foreign key (EMPLOYEE_ID) 
        references EMPLOYEES(EMPLOYEE_ID) on delete cascade,
    constraint FK_OLD_DEPARTMENT foreign key (OLD_DEPARTMENT_ID) 
        references DEPARTMENTS(DEPARTMENT_ID) on delete set null,
    constraint FK_NEW_DEPARTMENT foreign key (NEW_DEPARTMENT_ID) 
        references DEPARTMENTS(DEPARTMENT_ID) on delete cascade
);

insert into EMPLOYEE_MOVES (EMPLOYEE_ID, OLD_DEPARTMENT_ID, NEW_DEPARTMENT_ID, MOVE_DATE) 
values (9, 21, 1, TO_DATE('2020-01-15', 'YYYY-MM-DD'));
insert into EMPLOYEE_MOVES (EMPLOYEE_ID, OLD_DEPARTMENT_ID, NEW_DEPARTMENT_ID, MOVE_DATE) 
values (10, 24, 22, TO_DATE('2025-01-10', 'YYYY-MM-DD'));
insert into EMPLOYEE_MOVES (EMPLOYEE_ID, OLD_DEPARTMENT_ID, NEW_DEPARTMENT_ID, MOVE_DATE) 
values (10, 22, 2, TO_DATE('2025-02-10', 'YYYY-MM-DD'));

--2
select em.EMPLOYEE_ID, 
       e.FIRST_NAME || ' ' || e.MIDDLE_NAME ||' '|| e.LAST_NAME as FULL_NAME, 
       count(em.MOVE_ID) as MOVES_COUNT
from EMPLOYEE_MOVES em
join EMPLOYEES e on e.EMPLOYEE_ID = em.EMPLOYEE_ID
where em.MOVE_DATE >= ADD_MONTHS(sysdate, -2)
group by em.EMPLOYEE_ID, e.FIRST_NAME, e.MIDDLE_NAME, e.LAST_NAME
having count(em.MOVE_ID) > 1;

--3
select e.EMPLOYEE_ID, 
       e.FIRST_NAME || ' ' || e.MIDDLE_NAME || ' ' || e.LAST_NAME as FULL_NAME,
       d.NAME as DEPARTMENT_NAME
from EMPLOYEES e
join DEPARTMENTS d on e.DEPARTMENT_ID = d.DEPARTMENT_ID
left join EMPLOYEE_MOVES em on e.EMPLOYEE_ID = em.EMPLOYEE_ID
where em.EMPLOYEE_ID is null;

--biznes zayavka 3
--1
alter table EMPLOYEES
add IS_ACTIVE number(1) default 1 not null;

create table EMPLOYEE_STATUS(
  STATUS_ID number generated always as identity,
  STATUS_NAME varchar(100) not null,
  primary key(STATUS_ID)
);

insert into EMPLOYEE_STATUS(STATUS_NAME) values ('Болен');
insert into EMPLOYEE_STATUS(STATUS_NAME) values ('Ранен');
insert into EMPLOYEE_STATUS(STATUS_NAME) values ('Майчинство');
insert into EMPLOYEE_STATUS(STATUS_NAME) values ('Уволнен');

create table EMPLOYEE_LACK (
    LACK_ID number generated always as identity,
    EMPLOYEE_ID number not null,
    STATUS_ID number not null,
    START_DATE date not null,
    END_DATE date,
    primary key(LACK_ID),
    constraint FK_LACK_EMPLOYEE foreign key (EMPLOYEE_ID)
        references EMPLOYEES(EMPLOYEE_ID) on delete cascade,
    constraint FK_LACK_STATUS foreign key (STATUS_ID)
        references EMPLOYEE_STATUS(STATUS_ID) on delete cascade
);
-- hahahah sorry xd
insert into EMPLOYEES(FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, POSITION, DEPARTMENT_ID, MANAGER_ID, SALARY, HIRE_DATE, IS_ACTIVE)
values('Joohn', 'Not', 'Doooe', 'JohnDoe`s street 12', '08835553121', 'notdoe1@abv.bg', 'Customer-support', 22, 9, 3300, TO_DATE('2021-02-12','YYYY-MM-DD'), 0);
insert into EMPLOYEES(FIRST_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, POSITION, DEPARTMENT_ID, MANAGER_ID, SALARY, HIRE_DATE, IS_ACTIVE)
values('Juehn', 'Dae', 'New York', '08123451231', 'newjohn23@abv.bg', 'IT specialist', 23, 9, 5500, TO_DATE('2019-08-01','YYYY-MM-DD'), 0);
insert into EMPLOYEES(FIRST_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, POSITION, DEPARTMENT_ID, MANAGER_ID, SALARY, HIRE_DATE, IS_ACTIVE)
values('Jiiihn', 'Duuue', 'Planet earth', '0872662832', 'abvabv@abv.bg', 'Manager', 1, null, 10500, TO_DATE('2025-03-01','YYYY-MM-DD'), 0);
-- :)

insert into EMPLOYEE_LACK (EMPLOYEE_ID, STATUS_ID, START_DATE) 
values (20, 4, TO_DATE('2025-03-02', 'YYYY-MM-DD')); 

select e.EMPLOYEE_ID,
       e.FIRST_NAME || ' ' || e.MIDDLE_NAME || ' ' || e.LAST_NAME as FULL_NAME,
       e.POSITION,
       d.NAME as DEPARTMENT_NAME,
       el.START_DATE as TERMINATION_DATE
from EMPLOYEES e
join EMPLOYEE_LACK el on e.EMPLOYEE_ID = el.EMPLOYEE_ID
join EMPLOYEE_STATUS es on el.STATUS_ID = es.STATUS_ID
join DEPARTMENTS d on e.DEPARTMENT_ID = d.DEPARTMENT_ID
where es.STATUS_NAME = 'Уволнен';

--2
select * from EMPLOYEE_STATUS;
select * from employees;
insert into EMPLOYEE_LACK (EMPLOYEE_ID, STATUS_ID, START_DATE)
values (14, 3, TO_DATE('2025-02-20', 'YYYY-MM-DD'));


select e.EMPLOYEE_ID,
       e.FIRST_NAME || ' ' || e.MIDDLE_NAME || ' ' || e.LAST_NAME as FULL_NAME,
       e.POSITION,
       d.NAME as DEPARTMENT_NAME,
       el.START_DATE as TERMINATION_DATE
from EMPLOYEES e
join EMPLOYEE_LACK el on e.EMPLOYEE_ID = el.EMPLOYEE_ID
join EMPLOYEE_STATUS es on el.STATUS_ID = es.STATUS_ID
join DEPARTMENTS d on e.DEPARTMENT_ID = d.DEPARTMENT_ID
where es.STATUS_NAME = 'Майчинство';

--3
insert into EMPLOYEE_LACK (EMPLOYEE_ID, STATUS_ID, START_DATE)
values (15, 1, TO_DATE('2025-03-01', 'YYYY-MM-DD'));

select e.EMPLOYEE_ID,
       e.FIRST_NAME || ' ' || e.MIDDLE_NAME || ' ' || e.LAST_NAME as FULL_NAME,
       e.POSITION,
       d.NAME as DEPARTMENT_NAME,
       el.START_DATE as TERMINATION_DATE
from EMPLOYEES e
join EMPLOYEE_LACK el on e.EMPLOYEE_ID = el.EMPLOYEE_ID
join EMPLOYEE_STATUS es on el.STATUS_ID = es.STATUS_ID
join DEPARTMENTS d on e.DEPARTMENT_ID = d.DEPARTMENT_ID
where es.STATUS_NAME = 'Болен';

--4
select EMPLOYEE_ID,
       FIRST_NAME || ' ' || MIDDLE_NAME || ' ' || LAST_NAME as FULL_NAME,
       POSITION,
       MANAGER_ID
from EMPLOYEES
where MANAGER_ID is null;

--5
select EMPLOYEE_ID, 
       FIRST_NAME || ' ' || MIDDLE_NAME || ' ' || LAST_NAME as FULL_NAME,
       POSITION,
       SALARY
from EMPLOYEES
where SALARY > 5000
order by FIRST_NAME desc;

--6
select EMPLOYEE_ID,
       FIRST_NAME || ' ' || MIDDLE_NAME || ' ' || LAST_NAME as FULL_NAME,
       POSITION,
       SALARY,
       DEPARTMENT_ID
from (
    select EMPLOYEE_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, POSITION, SALARY, DEPARTMENT_ID,
           row_number() over (partition by DEPARTMENT_ID order by salary desc) as RN
    from EMPLOYEES
)
where RN <= 5
order by DEPARTMENT_ID, RN;

--7
select DEPARTMENT_ID, SUM(SALARY) as TOTAL_SALARY
from EMPLOYEES
group by DEPARTMENT_ID
having sum(SALARY) = (
    select min(TOTAL_SALARY)
    from (
        select sum(SALARY) as TOTAL_SALARY
        from EMPLOYEES
        group by DEPARTMENT_ID
    )
)
order by DEPARTMENT_ID;

--8
select DEPARTMENT_ID, AVG(SALARY) as AVG_SALARY
from EMPLOYEES
group by DEPARTMENT_ID
order by DEPARTMENT_ID;

--biznes zayavka 4
--1
select * from CLIENTS;
select * from accounts;

-- Inserting new clients
INSERT INTO CLIENTS (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL) 
VALUES ('Vladyslav', 'Denysovych', 'Lytvynenko', 'bul Nikola Vaptsarov, Plovdiv', '0879665794', 'vladlit.vinenko2909@gmail.com');

INSERT INTO CLIENTS (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL) 
VALUES ('John', 'Michael', 'Smith', '123 Elm Street, Sofia', '0881234567', 'john.smith@client.bg');

INSERT INTO CLIENTS (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL) 
VALUES ('Sarah', 'Jane', 'Johnson', '456 Oak Street, Varna', '0899876543', 'sarah.johnson@client.bg');

INSERT INTO CLIENTS (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL) 
VALUES ('James', 'Robert', 'Brown', '789 Pine Street, Plovdiv', '0883344556', 'james.brown@client.bg');

INSERT INTO CLIENTS (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL) 
VALUES ('Olivia', 'Marie', 'Davis', '321 Birch Street, Burgas', '0895544332', 'olivia.davis@client.bg');

INSERT INTO CLIENTS (FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL) 
VALUES ('Michael', 'David', 'Miller', '654 Maple Street, Ruse', '0881223344', 'michael.miller@client.bg');

-- Inserting accounts for these clients with different currencies
INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (21, 'BG9876543210', 1500.00, 'UAH');  -- John Smith, UAH

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (22, 'BG1234567891', 2000.00, 'USD');  -- Sarah Johnson, USD

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (23, 'BG9876543212', 2500.00, 'EUR');  -- James Brown, EUR

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (24, 'BG6543219870', 3000.00, 'GBP');  -- Olivia Davis, GBP

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (25, 'BG1234567892', 3500.00, 'JPY');  -- Michael Miller, JPY

-- Inserting accounts in BGN
INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (21, 'BG9876543211', 1000.00, 'BGN');  -- John Smith, BGN

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (22, 'BG1234567893', 5000.00, 'BGN');  -- Sarah Johnson, BGN

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (23, 'BG9876543213', 4000.00, 'BGN');  -- James Brown, BGN

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (24, 'BG6543219871', 4500.00, 'BGN');  -- Olivia Davis, BGN

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (25, 'BG1234567894', 6000.00, 'BGN');  -- Michael Miller, BGN

INSERT INTO ACCOUNTS (CLIENT_ID, ACCOUNT_NUMBER, BALANCE, CURRENCY) 
VALUES (26, 'BG2909200625', 0000.00, 'BGN');  -- Me :((((, BGN


select c.FIRST_NAME || ' ' || c.LAST_NAME as client_name,
       a.ACCOUNT_NUMBER,
       a.CURRENCY
from CLIENTS c 
join ACCOUNTS a on c.CLIENT_ID = a.CLIENT_ID
where a.CURRENCY <> 'BGN';

--2
select c.FIRST_NAME || ' ' || c.LAST_NAME as client_name,
       a.ACCOUNT_NUMBER,
       a.BALANCE
from clients c 
join accounts a on c.client_id = a.client_id
where a.BALANCE = 0;

--3
alter table accounts 
add ACCOUNT_NAME varchar2(255);

update ACCOUNTS a
set ACCOUNT_NAME = (
    select c.FIRST_NAME || ' ' || c.LAST_NAME || ' сметка ' || a.CURRENCY
    from CLIENTS c
    where c.CLIENT_ID = a.CLIENT_ID
);

select * from ACCOUNTS;